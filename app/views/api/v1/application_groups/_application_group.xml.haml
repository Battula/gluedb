= render 'shared/identity', id: api_v1_application_group_url(group.id)
%n1:applicants
  - group.people.each do |person|
    %n1:applicant= render 'shared/individual_type', person: person
- unless group.households.empty?
  %n1:households
    - group.households.each do |household|
      %n1:household
        = render 'shared/identity', id: api_v1_household_url(household.id)
        %n1:tax_household_size= household.people.count
        %n1:head_of_household= render 'shared/individual_link_type', person: household.head_of_household
        - members = group.people.reject { |p| p == household.head_of_household }
        - unless members.empty?
          %n1:household_members
            - members.each do |member|
              %n1:household_member
                = render 'shared/individual_link_type', person: member
        - if false
          %n1:total_incomes
            %n1:total_income
              %n1:calendar_year
              %n1:total_income
        - unless household.eligibilities.empty?
          %n1:eligibility_determinations
            - household.eligibilities.each do |eligibility|
              %n1:eligibility_determination
                %n1:id= "" # TODO... if/when there is an eligibility endpoint
                - if false
                  %n1:authority_source_uri
                %n1:date= eligibility.date_determined.try(:strftime,"%Y%m%d")
                %n1:maximum_aptc= eligibility.max_aptc
                %n1:magi_amount= eligibility.magi
        %n1:active_flag= household.active
        = render 'shared/timestamp', record: household
%n1:qualifying_life_events
  - group.special_enrollment_periods.each do |sep|
    %n1:qualifying_life_event 
      = render 'shared/identity', id: "" #TODO id is url to end point-- none for sep yet
      %n1:kind= "urn:dc0:terms:v1:qualifying_life_event##{sep.reason}" # make sure the list in xsd match in the model
      %n1:event_date= #TODO
      - if false 
        %n1:submitted_date
      %n1:sep_dates
        %n1:begin_date= sep.start_date.try(:strftime,"%Y%m%d")
        %n1:end_date= sep.end_date.try(:strftime,"%Y%m%d")
        %n1:number_of_days= sep.duration_in_days
      - if false
        %n1:approval
          %n1:status
          %n1:determined_by
          %n1:determination_date
          %n1:notes
      - if false
        %n1:notes
    = render 'shared/timestamp', record: sep
%n1:active_flag= group.active
= render 'shared/timestamp', record: group